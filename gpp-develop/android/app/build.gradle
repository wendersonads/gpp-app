def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def dartEnvironmentVariables = [
    DEFINE_APP_NAME: 'GPP',
    DEFINE_SUFFIX_NAME: null
];

if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
                                .split(',')
                                .collectEntries { entry ->
                                    def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                                    [(pair.first()): pair.last()]
                                }
}

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "br.com.novomundo.gpp"
        applicationIdSuffix dartEnvironmentVariables.DEFINE_SUFFIX_NAME
        minSdkVersion 21
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        resValue "string", "app_name", dartEnvironmentVariables.DEFINE_APP_NAME
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "app"
    productFlavors {
        dev {
            dimension "app"
            versionNameSuffix "-dev"
            resValue "string", "app_name", "GPPd"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }
        hom {
            dimension "app"
            resValue "string", "app_name", "GPPh"
            applicationIdSuffix '.hom'
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }
        trei {
            dimension "app"
            resValue "string", "app_name", "GPPt"
            applicationIdSuffix '.trei'
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }
        prd {
            dimension "app"
            applicationId "br.com.novomundo.gpp"
            resValue "string", "app_name", "GPP"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'
}
