Postgresql docker
docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.CreatedAt}}"
this is my container postgres if instance restar
docker start dc6

sudo docker run --name postgres-container-docker -e POSTGRES_PASSWORD=123456 -p 5433:5432 -d postgres
docker run -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=123456 postgres
docker run -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=123456 -d postgres

Auth




*****************************************************************************************************************************************************************************
Build angular
ip minha máquina: 10.150.160.63
create files of project: 
descontinuado: ng build --prod --configuration production
ng build --configuration=production --base-href /
ng build --configuration production

"configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "5000kb",
                  "maximumError": "5mb"
                },

mvn clean package
java -jar authentication_api-0.0.1-SNAPSHOT.jar
sudo lsof -i :8081
sudo kill 39638
docker ps
docker stop dc64


*****************************************************************************************************************************************************************************
Docker File

nano Dockerfile
create a docker image
docker build -t ubuntu/gpi-ads4-chico .
see run
docker run -p 8081:8080 ubuntu/gpi-ads4-chico
run background
docker run -d -p 8081:8081 ubuntu/gpi-ads4-chico


docker build -t first-spring-docker .

docker run -p 8081:8081 first-spring-docker
docker run -d -p 8081:8081 first-spring-docker

*****************************************************************************************************************************************************************************

Certainly! Here's a complete set of commands to install Apache web server and auto-assign a self-signed certificate to your AWS EC2 instance with the IP address 54.94.75.75:

Connect to your EC2 instance via SSH.

Update the package list:

sql
Copy code
sudo apt update
Install Apache web server:

Copy code
sudo apt install apache2
Enable the SSL module in Apache:

Copy code
sudo a2enmod ssl
Generate a self-signed certificate and private key:

bash
Copy code
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt
Follow the prompts to provide the necessary information, such as your country, organization, and common name (enter your IP address or a descriptive name).

Create a new SSL configuration file:

bash
Copy code
sudo nano /etc/apache2/conf-available/ssl-params.conf
Paste the following configuration into the file:

php
Copy code
SSLProtocol all -SSLv2 -SSLv3
SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE
SSLHonorCipherOrder on
SSLCompression off
SSLOptions +StrictRequire

<FilesMatch "\.(cgi|shtml|phtml|php)$">
    SSLOptions +StdEnvVars
</FilesMatch>

<Directory /usr/lib/cgi-bin>
    SSLOptions +StdEnvVars
</Directory>
Save and close the file (Ctrl+X, Y, Enter in nano).

Enable the SSL configuration:

csharp
Copy code
sudo a2enconf ssl-params
Create a new virtual host configuration file:

arduino
Copy code
sudo nano /etc/apache2/sites-available/default-ssl.conf
Replace the contents of the file with the following configuration:

bash
Copy code
<IfModule mod_ssl.c>
    <VirtualHost _default_:443>
        ServerAdmin webmaster@localhost
        ServerName 54.94.75.75

        DocumentRoot /var/www/html

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

        SSLEngine on

        SSLCertificateFile      /etc/ssl/certs/apache-selfsigned.crt
        SSLCertificateKeyFile   /etc/ssl/private/apache-selfsigned.key

        <FilesMatch "\.(cgi|shtml|phtml|php)$">
            SSLOptions +StdEnvVars
        </FilesMatch>

        <Directory /usr/lib/cgi-bin>
            SSLOptions +StdEnvVars
        </Directory>

        BrowserMatch "MSIE [2-6]" \
            nokeepalive ssl-unclean-shutdown \
            downgrade-1.0 force-response-1.0

        BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
    </VirtualHost>
</IfModule>
Save and close the file (Ctrl+X, Y, Enter in nano).

Enable the default SSL virtual host:

arduino
Copy code
sudo a2ensite default-ssl.conf
Disable the default non-SSL virtual host:

arduino
Copy code
sudo a2dissite 000-default.conf
Restart Apache to apply the changes:

go
Copy code
sudo systemctl restart apache2


Full Permission a path
chmod -R 777 /home/ubuntu/app/


*****************************************************************************************************************************************************************************












